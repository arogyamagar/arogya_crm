{"version":3,"sources":["meteor://ðŸ’»app/packages/rate-limit/rate-limit.js"],"names":["module","export","RateLimiter","Meteor","link","v","Random","DEFAULT_INTERVAL_TIME_IN_MILLISECONDS","DEFAULT_REQUESTS_PER_INTERVAL","hasOwn","Object","prototype","hasOwnProperty","Rule","constructor","options","matchers","id","_matchers","_lastResetTime","Date","getTime","counters","match","input","entries","every","key","matcher","call","_generateKeyString","filter","reduce","returnString","apply","timeSinceLastReset","timeToNextReset","intervalTime","resetCounter","_executeCallback","reply","ruleInput","callback","e","console","error","rules","check","allowed","timeToReset","numInvocationsLeft","Infinity","matchedRules","_findAllMatchingRules","forEach","rule","ruleResult","numInvocations","numRequestsAllowed","ruleId","addRule","bindEnvironment","newRule","increment","values","removeRule"],"mappings":"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","file":"/packages/rate-limit.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Random } from 'meteor/random';\n\n// Default time interval (in milliseconds) to reset rate limit counters\nconst DEFAULT_INTERVAL_TIME_IN_MILLISECONDS = 1000;\n// Default number of events allowed per time interval\nconst DEFAULT_REQUESTS_PER_INTERVAL = 10;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// A rule is defined by an options object that contains two fields,\n// `numRequestsAllowed` which is the number of events allowed per interval, and\n// an `intervalTime` which is the amount of time in milliseconds before the\n// rate limit restarts its internal counters, and by a matchers object. A\n// matchers object is a POJO that contains a set of keys with values that\n// define the entire set of inputs that match for each key. The values can\n// either be null (optional), a primitive or a function that returns a boolean\n// of whether the provided input's value matches for this key.\n//\n// Rules are uniquely assigned an `id` and they store a dictionary of counters,\n// which are records used to keep track of inputs that match the rule. If a\n// counter reaches the `numRequestsAllowed` within a given `intervalTime`, a\n// rate limit is reached and future inputs that map to that counter will\n// result in errors being returned to the client.\nclass Rule {\n  constructor(options, matchers) {\n    this.id = Random.id();\n\n    this.options = options;\n\n    this._matchers = matchers;\n\n    this._lastResetTime = new Date().getTime();\n\n    // Dictionary of input keys to counters\n    this.counters = {};\n  }\n  // Determine if this rule applies to the given input by comparing all\n  // rule.matchers. If the match fails, search short circuits instead of\n  // iterating through all matchers.\n  match(input) {\n    return Object\n      .entries(this._matchers)\n      .every(([key, matcher]) => {\n        if (matcher !== null) {\n          if (!hasOwn.call(input, key)) {\n            return false;\n          } else if (typeof matcher === 'function') {\n            if (!(matcher(input[key]))) {\n              return false;\n            }\n          } else if (matcher !== input[key]) {\n            return false;\n          }\n        }\n        return true;\n      });\n  }\n\n  // Generates unique key string for provided input by concatenating all the\n  // keys in the matcher with the corresponding values in the input.\n  // Only called if rule matches input.\n  _generateKeyString(input) {\n    return Object.entries(this._matchers)\n      .filter(([key]) => this._matchers[key] !== null)\n      .reduce((returnString, [key, matcher]) => {\n        if (typeof matcher === 'function') {\n          if (matcher(input[key])) {\n            returnString += key + input[key];\n          }\n        } else {\n          returnString += key + input[key];\n        }\n        return returnString;\n      }, '');\n  }\n\n  // Applies the provided input and returns the key string, time since counters\n  // were last reset and time to next reset.\n  apply(input) {\n    const key = this._generateKeyString(input);\n    const timeSinceLastReset = new Date().getTime() - this._lastResetTime;\n    const timeToNextReset = this.options.intervalTime - timeSinceLastReset;\n    return {\n      key,\n      timeSinceLastReset,\n      timeToNextReset,\n    };\n  }\n\n  // Reset counter dictionary for this specific rule. Called once the\n  // timeSinceLastReset has exceeded the intervalTime. _lastResetTime is\n  // set to be the current time in milliseconds.\n  resetCounter() {\n    // Delete the old counters dictionary to allow for garbage collection\n    this.counters = {};\n    this._lastResetTime = new Date().getTime();\n  }\n\n  _executeCallback(reply, ruleInput) {\n    try {\n      if (this.options.callback) {\n        this.options.callback(reply, ruleInput);\n      }\n    } catch (e) {\n      // Do not throw error here\n      console.error(e);\n    }\n  }\n}\n\nclass RateLimiter {\n  // Initialize rules to be an empty dictionary.\n  constructor() {\n    // Dictionary of all rules associated with this RateLimiter, keyed by their\n    // id. Each rule object stores the rule pattern, number of events allowed,\n    // last reset time and the rule reset interval in milliseconds.\n\n    this.rules = {};\n  }\n\n  /**\n  * Checks if this input has exceeded any rate limits.\n  * @param  {object} input dictionary containing key-value pairs of attributes\n  * that match to rules\n  * @return {object} Returns object of following structure\n  * { 'allowed': boolean - is this input allowed\n  *   'timeToReset': integer | Infinity - returns time until counters are reset\n  *                   in milliseconds\n  *   'numInvocationsLeft': integer | Infinity - returns number of calls left\n  *   before limit is reached\n  * }\n  * If multiple rules match, the least number of invocations left is returned.\n  * If the rate limit has been reached, the longest timeToReset is returned.\n  */\n  check(input) {\n    const reply = {\n      allowed: true,\n      timeToReset: 0,\n      numInvocationsLeft: Infinity,\n    };\n\n    const matchedRules = this._findAllMatchingRules(input);\n    matchedRules.forEach((rule) => {\n      const ruleResult = rule.apply(input);\n      let numInvocations = rule.counters[ruleResult.key];\n\n      if (ruleResult.timeToNextReset < 0) {\n        // Reset all the counters since the rule has reset\n        rule.resetCounter();\n        ruleResult.timeSinceLastReset = new Date().getTime() -\n          rule._lastResetTime;\n        ruleResult.timeToNextReset = rule.options.intervalTime;\n        numInvocations = 0;\n      }\n\n      if (numInvocations > rule.options.numRequestsAllowed) {\n        // Only update timeToReset if the new time would be longer than the\n        // previously set time. This is to ensure that if this input triggers\n        // multiple rules, we return the longest period of time until they can\n        // successfully make another call\n        if (reply.timeToReset < ruleResult.timeToNextReset) {\n          reply.timeToReset = ruleResult.timeToNextReset;\n        }\n        reply.allowed = false;\n        reply.numInvocationsLeft = 0;\n        reply.ruleId = rule.id;\n        rule._executeCallback(reply, input);\n      } else {\n        // If this is an allowed attempt and we haven't failed on any of the\n        // other rules that match, update the reply field.\n        if (rule.options.numRequestsAllowed - numInvocations <\n          reply.numInvocationsLeft && reply.allowed) {\n          reply.timeToReset = ruleResult.timeToNextReset;\n          reply.numInvocationsLeft = rule.options.numRequestsAllowed -\n            numInvocations;\n        }\n        reply.ruleId = rule.id;\n        rule._executeCallback(reply, input);\n      }\n    });\n    return reply;\n  }\n\n  /**\n  * Adds a rule to dictionary of rules that are checked against on every call.\n  * Only inputs that pass all of the rules will be allowed. Returns unique rule\n  * id that can be passed to `removeRule`.\n  * @param {object} rule    Input dictionary defining certain attributes and\n  * rules associated with them.\n  * Each attribute's value can either be a value, a function or null. All\n  * functions must return a boolean of whether the input is matched by that\n  * attribute's rule or not\n  * @param {integer} numRequestsAllowed Optional. Number of events allowed per\n  * interval. Default = 10.\n  * @param {integer} intervalTime Optional. Number of milliseconds before\n  * rule's counters are reset. Default = 1000.\n  * @param {function} callback Optional. Function to be called after a\n  * rule is executed. Two objects will be passed to this function.\n  * The first one is the result of RateLimiter.prototype.check\n  * The second is the input object of the rule, it has the following structure:\n  * {\n  *   'type': string - either 'method' or 'subscription'\n  *   'name': string - the name of the method or subscription being called\n  *   'userId': string - the user ID attempting the method or subscription\n  *   'connectionId': string - a string representing the user's DDP connection\n  *   'clientAddress': string - the IP address of the user\n  * }\n  * @return {string} Returns unique rule id\n  */\n  addRule(rule, numRequestsAllowed, intervalTime, callback) {\n    const options = {\n      numRequestsAllowed: numRequestsAllowed || DEFAULT_REQUESTS_PER_INTERVAL,\n      intervalTime: intervalTime || DEFAULT_INTERVAL_TIME_IN_MILLISECONDS,\n      callback: callback && Meteor.bindEnvironment(callback),\n    };\n\n    const newRule = new Rule(options, rule);\n    this.rules[newRule.id] = newRule;\n    return newRule.id;\n  }\n\n  /**\n  * Increment counters in every rule that match to this input\n  * @param  {object} input Dictionary object containing attributes that may\n  * match to rules\n  */\n  increment(input) {\n    // Only increment rule counters that match this input\n    const matchedRules = this._findAllMatchingRules(input);\n    matchedRules.forEach((rule) => {\n      const ruleResult = rule.apply(input);\n\n      if (ruleResult.timeSinceLastReset > rule.options.intervalTime) {\n        // Reset all the counters since the rule has reset\n        rule.resetCounter();\n      }\n\n      // Check whether the key exists, incrementing it if so or otherwise\n      // adding the key and setting its value to 1\n      if (hasOwn.call(rule.counters, ruleResult.key)) {\n        rule.counters[ruleResult.key]++;\n      } else {\n        rule.counters[ruleResult.key] = 1;\n      }\n    });\n  }\n\n  // Returns an array of all rules that apply to provided input\n  _findAllMatchingRules(input) {\n    return Object.values(this.rules).filter(rule => rule.match(input));\n  }\n\n  /**\n   * Provides a mechanism to remove rules from the rate limiter. Returns boolean\n   * about success.\n   * @param  {string} id Rule id returned from #addRule\n   * @return {boolean} Returns true if rule was found and deleted, else false.\n   */\n  removeRule(id) {\n    if (this.rules[id]) {\n      delete this.rules[id];\n      return true;\n    }\n    return false;\n  }\n}\n\nexport { RateLimiter };\n"]}