{"version":3,"sources":["meteor://ðŸ’»app/packages/webapp-hashing/webapp-hashing.js"],"names":["_objectWithoutProperties","module","link","default","v","createHash","WebAppHashing","calculateClientHash","manifest","includeFilter","runtimeConfigOverride","hash","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","__meteor_runtime_config__","runtimeCfg","update","JSON","stringify","forEach","resource","type","replaceable","where","path","digest","calculateCordovaCompatibilityHash","platformVersion","pluginVersions","plugins","Object","keys","sort","plugin","version"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,wBAAwB;AAACC,MAAM,CAACC,IAAI,CAAC,gDAAgD,EAAC;EAACC,OAAO,CAACC,CAAC,EAAC;IAACJ,wBAAwB,GAACI,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAArI,IAAIC,UAAU;AAACJ,MAAM,CAACC,IAAI,CAAC,QAAQ,EAAC;EAACG,UAAU,CAACD,CAAC,EAAC;IAACC,UAAU,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAEpEE,aAAa,GAAG,CAAC,CAAC;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,aAAa,CAACC,mBAAmB,GAC/B,UAAUC,QAAQ,EAAEC,aAAa,EAAEC,qBAAqB,EAAE;EAC1D,IAAIC,IAAI,GAAGN,UAAU,CAAC,MAAM,CAAC;;EAE7B;EACA;EACA,IAAI;MAAEO,iBAAiB;MAAEC,4BAA4B;MAAEC;IAAwC,CAAC,GAAGC,yBAAyB;IAAxCC,UAAU,4BAAKD,yBAAyB;EAE5H,IAAIL,qBAAqB,EAAE;IACzBM,UAAU,GAAGN,qBAAqB;EACpC;EAEAC,IAAI,CAACM,MAAM,CAACC,IAAI,CAACC,SAAS,CAACH,UAAU,EAAE,MAAM,CAAC,CAAC;EAE/CR,QAAQ,CAACY,OAAO,CAAC,UAAUC,QAAQ,EAAE;IACjC,IAAI,CAAC,CAAEZ,aAAa,IAAIA,aAAa,CAACY,QAAQ,CAACC,IAAI,EAAED,QAAQ,CAACE,WAAW,CAAC,MACrEF,QAAQ,CAACG,KAAK,KAAK,QAAQ,IAAIH,QAAQ,CAACG,KAAK,KAAK,UAAU,CAAC,EAAE;MACpEb,IAAI,CAACM,MAAM,CAACI,QAAQ,CAACI,IAAI,CAAC;MAC1Bd,IAAI,CAACM,MAAM,CAACI,QAAQ,CAACV,IAAI,CAAC;IAC5B;EACF,CAAC,CAAC;EACF,OAAOA,IAAI,CAACe,MAAM,CAAC,KAAK,CAAC;AAC3B,CAAC;AAEDpB,aAAa,CAACqB,iCAAiC,GAC7C,UAASC,eAAe,EAAEC,cAAc,EAAE;EAC1C,MAAMlB,IAAI,GAAGN,UAAU,CAAC,MAAM,CAAC;EAE/BM,IAAI,CAACM,MAAM,CAACW,eAAe,CAAC;;EAE5B;EACA,MAAME,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,cAAc,CAAC,CAACI,IAAI,EAAE;EAClD,KAAK,IAAIC,MAAM,IAAIJ,OAAO,EAAE;IAC1B,MAAMK,OAAO,GAAGN,cAAc,CAACK,MAAM,CAAC;IACtCvB,IAAI,CAACM,MAAM,CAACiB,MAAM,CAAC;IACnBvB,IAAI,CAACM,MAAM,CAACkB,OAAO,CAAC;EACtB;EAEA,OAAOxB,IAAI,CAACe,MAAM,CAAC,KAAK,CAAC;AAC3B,CAAC,C","file":"/packages/webapp-hashing.js","sourcesContent":["import { createHash } from \"crypto\";\n\nWebAppHashing = {};\n\n// Calculate a hash of all the client resources downloaded by the\n// browser, including the application HTML, runtime config, code, and\n// static files.\n//\n// This hash *must* change if any resources seen by the browser\n// change, and ideally *doesn't* change for any server-only changes\n// (but the second is a performance enhancement, not a hard\n// requirement).\n\nWebAppHashing.calculateClientHash =\n  function (manifest, includeFilter, runtimeConfigOverride) {\n  var hash = createHash('sha1');\n\n  // Omit the old hashed client values in the new hash. These may be\n  // modified in the new boilerplate.\n  var { autoupdateVersion, autoupdateVersionRefreshable, autoupdateVersionCordova, ...runtimeCfg } = __meteor_runtime_config__;\n\n  if (runtimeConfigOverride) {\n    runtimeCfg = runtimeConfigOverride;\n  }\n\n  hash.update(JSON.stringify(runtimeCfg, 'utf8'));\n\n  manifest.forEach(function (resource) {\n      if ((! includeFilter || includeFilter(resource.type, resource.replaceable)) &&\n          (resource.where === 'client' || resource.where === 'internal')) {\n      hash.update(resource.path);\n      hash.update(resource.hash);\n    }\n  });\n  return hash.digest('hex');\n};\n\nWebAppHashing.calculateCordovaCompatibilityHash =\n  function(platformVersion, pluginVersions) {\n  const hash = createHash('sha1');\n\n  hash.update(platformVersion);\n\n  // Sort plugins first so iteration order doesn't affect the hash\n  const plugins = Object.keys(pluginVersions).sort();\n  for (let plugin of plugins) {\n    const version = pluginVersions[plugin];\n    hash.update(plugin);\n    hash.update(version);\n  }\n\n  return hash.digest('hex');\n};\n"]}