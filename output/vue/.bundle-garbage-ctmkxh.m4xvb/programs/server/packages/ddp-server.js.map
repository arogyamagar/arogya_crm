{"version":3,"sources":["meteor://ðŸ’»app/packages/ddp-server/stream_server.js","meteor://ðŸ’»app/packages/ddp-server/livedata_server.js","meteor://ðŸ’»app/packages/ddp-server/writefence.js","meteor://ðŸ’»app/packages/ddp-server/crossbar.js","meteor://ðŸ’»app/packages/ddp-server/server_convenience.js"],"names":["websocketExtensions","_","once","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","Npm","require","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","without","TEST_METADATA","stringify","testMessageOnConnect","each","callback","Object","assign","prototype","register","all_sockets","values","forEach","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","url","parsedUrl","pathname","format","oldListener","apply","_objectSpread","module","link","default","v","DDPServer","Fiber","publicationStrategies","SERVER_MERGE","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","SessionDocumentView","existsIn","Set","dataByKey","Map","_SessionDocumentView","extend","getFields","ret","precedenceList","key","value","clearField","subscriptionHandle","changeCollector","get","removedValue","undefined","i","length","precedence","splice","delete","EJSON","equals","changeField","isAdd","clone","has","set","elt","find","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","isEmpty","size","diff","previous","DiffSequence","diffMaps","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","add","changedResult","Error","err","Session","version","options","Random","initialized","inQueue","Meteor","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","msg","session","startUniversalSubs","run","heartbeatInterval","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","_canSend","getPublicationStrategy","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","unblock","onMessageHook","protocol_handlers","call","sub","name","params","Array","publish_handlers","error","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","fence","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","promise","Promise","resolve","reject","getCurrentMethodInvocationResult","currentContext","DDP","_CurrentMethodInvocation","_setNewContextAndGetCurrent","result","resultOrThenable","maybeAuditArgumentChecks","isThenable","then","await","_set","_CurrentWriteFence","withValue","finish","payload","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","remoteAddress","forwardedFor","isString","trim","split","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","_CurrentPublicationInvocation","e","_isDeactivated","_publishHandlerResult","res","isCursor","c","_publishCursor","ready","isArray","all","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","strategy","includes","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","func","pop","callAsync","applyAsync","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","Future","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","EnvironmentVariable","beginWrite","committed","_maybeFire","onBeforeFire","armAndWait","future","wait","invokeCallback","_Crossbar","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","_collectionForMessage","listen","trigger","record","fire","notification","listenersForCollection","callbackIds","l","_matches","ObjectID","triggerValue","_InvalidationCrossbar","DDP_DEFAULT_CONNECTION_URL","refresh"],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n      socket.send(JSON.stringify({ testMessageOnConnect: true }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach((event) => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n","DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"added\", collection: collectionName, id, fields});\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"removed\", collection: collectionName, id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        const getCurrentMethodInvocationResult = () => {\n          const currentContext = DDP._CurrentMethodInvocation._setNewContextAndGetCurrent(\n            invocation\n          );\n\n          try {\n            let result;\n            const resultOrThenable = maybeAuditArgumentChecks(\n              handler,\n              invocation,\n              msg.params,\n              \"call to '\" + msg.method + \"'\"\n            );\n            const isThenable =\n              resultOrThenable && typeof resultOrThenable.then === 'function';\n            if (isThenable) {\n              result = Promise.await(resultOrThenable);\n            } else {\n              result = resultOrThenable;\n            }\n            return result;\n          } finally {\n            DDP._CurrentMethodInvocation._set(currentContext);\n          }\n        };\n\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, getCurrentMethodInvocationResult));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then(result => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () =>\n        maybeAuditArgumentChecks(\n          self._handler,\n          self,\n          EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"\n        )\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(\n        (...args) => self._publishHandlerResult.bind(self)(...args),\n        e => self.error(e)\n      );\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${collectionName}`);\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function() {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise.await();\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise(resolve => resolve(\n      DDP._CurrentMethodInvocation.withValue(\n        invocation,\n        () => maybeAuditArgumentChecks(\n          handler, invocation, EJSON.clone(args),\n          \"internal call to '\" + name + \"'\"\n        )\n      )\n    )).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n","var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server;\n\nMeteor.refresh = function (notification) {\n  DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(\n  [\n    'publish',\n    'methods',\n    'call',\n    'callAsync',\n    'apply',\n    'applyAsync',\n    'onConnection',\n    'onMessage',\n  ],\n  function(name) {\n    Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n  }\n);\n"]}