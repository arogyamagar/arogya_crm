{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-password/email_templates.js","meteor://ðŸ’»app/packages/accounts-password/password_server.js"],"names":["_objectSpread","module","link","default","v","greet","welcomeMsg","user","url","greeting","profile","name","Accounts","emailTemplates","from","siteName","Meteor","absoluteUrl","replace","resetPassword","subject","text","verifyEmail","enrollAccount","bcryptHash","bcryptCompare","hash","compare","getUserById","id","options","users","findOne","_addDefaultFieldSelector","_bcryptRounds","_options","bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","getRoundsFromBcryptHash","rounds","hashSegments","split","length","parseInt","_checkPasswordUserFields","_id","services","checkPasswordAsync","result","userId","formattedPassword","bcrypt","hashRounds","error","_handleError","defer","update","$set","checkPassword","Promise","await","_checkPassword","_checkPasswordAsync","findUserByUsername","username","_findUserByQuery","findUserByEmail","email","NonEmptyString","Match","Where","x","check","String","passwordValidator","OneOf","str","test","settings","packages","accounts","passwordMaxLength","registerLoginHandler","undefined","_userQueryValidator","code","Optional","fields","_check2faEnabled","_isTokenValid","twoFactorAuthentication","secret","setUsername","newUsername","oldUsername","_checkForCaseInsensitiveDuplicates","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","$unset","passwordChanged","setPasswordAsync","newPlaintextPassword","Maybe","logout","Boolean","setPassword","pluckAddresses","emails","map","address","forgotPassword","caseSensitiveEmail","find","toLowerCase","sendResetPasswordEmail","generateResetToken","reason","extraTokenData","includes","token","Random","tokenRecord","when","Date","Object","assign","_ensure","enroll","reset","generateVerificationToken","emailRecord","e","verified","$push","verificationTokens","push","extraParams","realEmail","urls","generateOptionsForEmail","Email","send","isDevelopment","console","log","sendEnrollmentEmail","args","_loginMethod","isEnroll","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","t","emailsRecord","addEmail","newEmail","caseInsensitiveRegExp","RegExp","_escapeRegExp","didUpdateOwnEmail","reduce","prev","$addToSet","removeEmail","createUser","ObjectIncluding","_createUserCheckingDuplicates","forbidClientAccountCreation","createUserVerifyingEmail","createUserAsync","callback","createIndex","unique","sparse"],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["const greet = welcomeMsg => (user, url) => {\n  const greeting =\n    user.profile && user.profile.name\n      ? `Hello ${user.profile.name},`\n      : 'Hello,';\n  return `${greeting}\n\n${welcomeMsg}, simply click the link below.\n\n${url}\n\nThank you.\n`;\n};\n\n/**\n * @summary Options to customize emails sent from the Accounts system.\n * @locus Server\n * @importFromPackage accounts-base\n */\nAccounts.emailTemplates = {\n  ...(Accounts.emailTemplates || {}),\n  from: 'Accounts Example <no-reply@example.com>',\n  siteName: Meteor.absoluteUrl()\n    .replace(/^https?:\\/\\//, '')\n    .replace(/\\/$/, ''),\n\n  resetPassword: {\n    subject: () =>\n      `How to reset your password on ${Accounts.emailTemplates.siteName}`,\n    text: greet('To reset your password'),\n  },\n  verifyEmail: {\n    subject: () =>\n      `How to verify email address on ${Accounts.emailTemplates.siteName}`,\n    text: greet('To verify your account email'),\n  },\n  enrollAccount: {\n    subject: () =>\n      `An account has been created for you on ${Accounts.emailTemplates.siteName}`,\n    text: greet('To start using the service'),\n  },\n};\n","import { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { Accounts } from \"meteor/accounts-base\";\n\n// Utility for grabbing user\nconst getUserById = (id, options) => Meteor.users.findOne(id, Accounts._addDefaultFieldSelector(options));\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords.\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nconst getPasswordString = password => {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nconst hashPassword = async password => {\n  password = getPasswordString(password);\n  return await bcryptHash(password, Accounts._bcryptRounds());\n};\n\n// Extract the number of rounds used in the specified bcrypt hash.\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n  if (hash) {\n    const hashSegments = hash.split('$');\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n  return rounds;\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n// The user parameter needs at least user._id and user.services\nAccounts._checkPasswordUserFields = {_id: 1, services: 1};\n//\nconst checkPasswordAsync = async (user, password) => {\n  const result = {\n    userId: user._id\n  };\n\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (! await bcryptCompare(formattedPassword, hash)) {\n    result.error = Accounts._handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n\n    Meteor.defer(async () => {\n      Meteor.users.update({ _id: user._id }, {\n        $set: {\n          'services.password.bcrypt':\n            await bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\n\nconst checkPassword = (user, password) => {\n  return Promise.await(checkPasswordAsync(user, password));\n};\n\nAccounts._checkPassword = checkPassword;\nAccounts._checkPasswordAsync =  checkPasswordAsync;\n\n///\n/// LOGIN\n///\n\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername =\n  (username, options) => Accounts._findUserByQuery({ username }, options);\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail =\n  (email, options) => Accounts._findUserByQuery({ email }, options);\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\nconst passwordValidator = Match.OneOf(\n  Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256), {\n    digest: Match.Where(str => Match.test(str, String) && str.length === 64),\n    algorithm: Match.OneOf('sha-256')\n  }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", async options => {\n  if (!options.password)\n    return undefined; // don't handle\n\n  check(options, {\n    user: Accounts._userQueryValidator,\n    password: passwordValidator,\n    code: Match.Optional(NonEmptyString),\n  });\n\n\n  const user = Accounts._findUserByQuery(options.user, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n\n  if (!user.services || !user.services.password ||\n      !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = await checkPasswordAsync(user, options.password);\n  // This method is added by the package accounts-2fa\n  // First the login is validated, then the code situation is checked\n  if (\n    !result.error &&\n    Accounts._check2faEnabled?.(user)\n  ) {\n    if (!options.code) {\n      Accounts._handleError('2FA code must be informed', true, 'no-2fa-code');\n    }\n    if (\n      !Accounts._isTokenValid(\n        user.services.twoFactorAuthentication.secret,\n        options.code\n      )\n    ) {\n      Accounts._handleError('Invalid 2FA code', true, 'invalid-2fa-code');\n    }\n  }\n\n  return result;\n});\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = (userId, newUsername) => {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  const user = getUserById(userId, {fields: {\n    username: 1,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  const oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  Accounts._checkForCaseInsensitiveDuplicates('username',\n    'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    Accounts._checkForCaseInsensitiveDuplicates('username',\n      'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\nMeteor.methods({changePassword: async function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId) {\n    throw new Meteor.Error(401, \"Must be logged in\");\n  }\n\n  const user = getUserById(this.userId, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n    Accounts._handleError(\"User has no password set\");\n  }\n\n  const result = await checkPasswordAsync(user, oldPassword);\n  if (result.error) {\n    throw result.error;\n  }\n\n  const hashed = await hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  const currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPasswordAsync = async (userId, newPlaintextPassword, options) => {\n  check(userId, String);\n  check(newPlaintextPassword, Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256));\n  check(options, Match.Maybe({ logout: Boolean }));\n  options = { logout: true , ...options };\n\n  const user = getUserById(userId, {fields: {_id: 1}});\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  const update = {\n    $unset: {\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': await hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = (userId, newPlaintextPassword, options) => {\n  return Promise.await(Accounts.setPasswordAsync(userId, newPlaintextPassword, options));\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Utility for plucking addresses from emails\nconst pluckAddresses = (emails = []) => emails.map(email => email.address);\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: options => {\n  check(options, {email: String})\n\n  const user = Accounts.findUserByEmail(options.email, { fields: { emails: 1 } });\n\n  if (!user) {\n    Accounts._handleError(\"User not found\");\n  }\n\n  const emails = pluckAddresses(user.emails);\n  const caseSensitiveEmail = emails.find(\n    email => email.toLowerCase() === options.email.toLowerCase()\n  );\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n/**\n * @summary Generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateResetToken = (userId, email, reason, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  }\n\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n  // if this method is called from the enroll account work-flow then\n  // store the token record in 'services.password.enroll' db field\n  // else store the token record in in 'services.password.reset' db field\n  if(reason === 'enrollAccount') {\n    Meteor.users.update({_id: user._id}, {\n      $set : {\n        'services.password.enroll': tokenRecord\n      }\n    });\n    // before passing to template, update user object with new token\n    Meteor._ensure(user, 'services', 'password').enroll = tokenRecord;\n  } else {\n    Meteor.users.update({_id: user._id}, {\n      $set : {\n        'services.password.reset': tokenRecord\n      }\n    });\n    // before passing to template, update user object with new token\n    Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  }\n\n  return {email, user, token};\n};\n\n/**\n * @summary Generates an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateVerificationToken = (userId, email, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n  if (!user) {\n    Accounts._handleError(\"Can't find user\");\n  }\n\n  // pick the first unverified email if we weren't passed an email.\n  if (!email) {\n    const emailRecord = (user.emails || []).find(e => !e.verified);\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      Accounts._handleError(\"That user has no unverified email addresses.\");\n    }\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    Accounts._handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({_id: user._id}, {$push: {\n    'services.email.verificationTokens': tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  return {email, user, token};\n};\n\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the reset url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = (userId, email, extraTokenData, extraParams) => {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n  const url = Accounts.urls.resetPassword(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nReset password URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the enrollment url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = (userId, email, extraTokenData, extraParams) => {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n  const url = Accounts.urls.enrollAccount(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nEnrollment email URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: async function (...args) {\n  const token = args[0];\n  const newPassword = args[1];\n  return await Accounts._loginMethod(\n    this,\n    \"resetPassword\",\n    args,\n    \"password\",\n    async () => {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      let user = Meteor.users.findOne(\n        {\"services.password.reset.token\": token},\n        {fields: {\n          services: 1,\n          emails: 1,\n        }}\n      );\n\n      let isEnroll = false;\n      // if token is in services.password.reset db field implies\n      // this method is was not called from enroll account workflow\n      // else this method is called from enroll account workflow\n      if(!user) {\n        user = Meteor.users.findOne(\n          {\"services.password.enroll.token\": token},\n          {fields: {\n            services: 1,\n            emails: 1,\n          }}\n        );\n        isEnroll = true;\n      }\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n      let tokenRecord = {};\n      if(isEnroll) {\n        tokenRecord = user.services.password.enroll;\n      } else {\n        tokenRecord = user.services.password.reset;\n      }\n      const { when, email } = tokenRecord;\n      let tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n      if (isEnroll) {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n      const currentTimeMs = Date.now();\n      if ((currentTimeMs - when) > tokenLifetimeMs)\n        throw new Meteor.Error(403, \"Token expired\");\n      if (!(pluckAddresses(user.emails).includes(email)))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      const hashed = await hashPassword(newPassword);\n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      const oldToken = Accounts._getLoginToken(this.connection.id);\n      Accounts._setLoginToken(user._id, this.connection, null);\n      const resetToOldToken = () =>\n        Accounts._setLoginToken(user._id, this.connection, oldToken);\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token or enroll token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        let affectedRecords = {};\n        // if reason is enroll then check services.password.enroll.token field for affected records\n        if(isEnroll) {\n          affectedRecords = Meteor.users.update(\n            {\n              _id: user._id,\n              'emails.address': email,\n              'services.password.enroll.token': token\n            },\n            {$set: {'services.password.bcrypt': hashed,\n                    'emails.$.verified': true},\n              $unset: {'services.password.enroll': 1 }});\n        } else {\n          affectedRecords = Meteor.users.update(\n            {\n              _id: user._id,\n              'emails.address': email,\n              'services.password.reset.token': token\n            },\n            {$set: {'services.password.bcrypt': hashed,\n                    'emails.$.verified': true},\n              $unset: {'services.password.reset': 1 }});\n        }\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      if (Accounts._check2faEnabled?.(user)) {\n        return {\n          userId: user._id,\n          error: Accounts._handleError(\n            'Changed password, but user not logged in because 2FA is enabled',\n            false,\n            '2fa-enabled'\n          ),\n        };\n      }\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the verification url.\n *\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = (userId, email, extraTokenData, extraParams) => {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  const {email: realEmail, user, token} =\n    Accounts.generateVerificationToken(userId, email, extraTokenData);\n  const url = Accounts.urls.verifyEmail(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nVerification email URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: async function (...args) {\n  const token = args[0];\n  return await Accounts._loginMethod(\n    this,\n    \"verifyEmail\",\n    args,\n    \"password\",\n    () => {\n      check(token, String);\n\n      const user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token},\n        {fields: {\n          services: 1,\n          emails: 1,\n        }}\n      );\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n        const tokenRecord = user.services.email.verificationTokens.find(\n          t => t.token == token\n        );\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      const emailsRecord = user.emails.find(\n        e => e.address == tokenRecord.address\n      );\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      if (Accounts._check2faEnabled?.(user)) {\n        return {\n          userId: user._id,\n          error: Accounts._handleError(\n            'Email verified, but user not logged in because 2FA is enabled',\n            false,\n            '2fa-enabled'\n          ),\n        };\n      }\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = (userId, newEmail, verified) => {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (verified === void 0) {\n    verified = false;\n  }\n\n  const user = getUserById(userId, {fields: {emails: 1}});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  const caseInsensitiveRegExp =\n    new RegExp(`^${Meteor._escapeRegExp(newEmail)}$`, 'i');\n\n  const didUpdateOwnEmail = (user.emails || []).reduce(\n    (prev, email) => {\n      if (caseInsensitiveRegExp.test(email.address)) {\n        Meteor.users.update({\n          _id: user._id,\n          'emails.address': email.address\n        }, {$set: {\n          'emails.$.address': newEmail,\n          'emails.$.verified': verified\n        }});\n        return true;\n      } else {\n        return prev;\n      }\n    },\n    false\n  );\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  Accounts._checkForCaseInsensitiveDuplicates('emails.address',\n    'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    Accounts._checkForCaseInsensitiveDuplicates('emails.address',\n      'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = (userId, email) => {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  const user = getUserById(userId, {fields: {_id: 1}});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nconst createUser = async options => {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  const { username, email, password } = options;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  const user = {services: {}};\n  if (password) {\n    const hashed = await hashPassword(password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  return Accounts._createUserCheckingDuplicates({ user, email, username, options });\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: async function (...args) {\n  const options = args[0];\n  return await Accounts._loginMethod(\n    this,\n    \"createUser\",\n    args,\n    \"password\",\n    async () => {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      const userId = await Accounts.createUserVerifyingEmail(options);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n/**\n * @summary Creates an user and sends an email if `options.email` is informed.\n * Then if the `sendVerificationEmail` option from the `Accounts` package is\n * enabled, you'll send a verification email if `options.password` is informed,\n * otherwise you'll send an enrollment email.\n * @locus Server\n * @param {Object} options The options object to be passed down when creating\n * the user\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @importFromPackage accounts-base\n * */\nAccounts.createUserVerifyingEmail = async (options) => {\n  options = { ...options };\n  // Create user. result contains id and token.\n  const userId = await createUser(options);\n  // safety belt. createUser is supposed to throw on error. send 500 error\n  // instead of sending a verification email with empty userid.\n  if (! userId)\n    throw new Error(\"createUser failed to insert new user\");\n\n  // If `Accounts._options.sendVerificationEmail` is set, register\n  // a token to verify the user's primary email, and send it to\n  // that address.\n  if (options.email && Accounts._options.sendVerificationEmail) {\n    if (options.password) {\n      Accounts.sendVerificationEmail(userId, options.email);\n    } else {\n      Accounts.sendEnrollmentEmail(userId, options.email);\n    }\n  }\n\n  return userId;\n};\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns Promise<userId> or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\nAccounts.createUserAsync = async (options, callback) => {\n  options = { ...options };\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\nAccounts.createUser = (options, callback) => {\n  return Promise.await(Accounts.createUserAsync(options, callback));\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users.createIndex('services.email.verificationTokens.token',\n                          { unique: true, sparse: true });\nMeteor.users.createIndex('services.password.reset.token',\n                          { unique: true, sparse: true });\nMeteor.users.createIndex('services.password.enroll.token',\n                          { unique: true, sparse: true });\n"]}